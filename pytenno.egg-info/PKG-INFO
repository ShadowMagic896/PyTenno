Metadata-Version: 2.1
Name: pytenno
Version: 0.1.0
Summary: A asynchronous Python library for interacting with the warframe.market API
Author-email: Ryan Peckham <86629697+ShadowMagic896@users.noreply.github.com>
License: MIT License
        
        Copyright (c) 2022 Ryan Peckham
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/ShadowMagic896/pytenno
Project-URL: Documentation, https://pytenno.readthedocs.io
Keywords: warframe,market,api,asyncio,aiohttp,wrapper
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Provides-Extra: dev
License-File: LICENSE

# PyTenno
PyTenno is an asynchronous wrapper for the [warframe.market](https://warframe.market) API, written in Python.

[Read Documentation](https://pytenno.readthedocs.io/en/latest/index.html)

## Installation

### Git
Use your favorite spice of the following:

```bash
py -m pip install git+https://github.com/ShadowMagic896/pytenno.git
```

- [Git-SCM](https://git-scm.com/) is required for direct installation

### PyPi

```bash
py -m pip install pytenno
```

## Requirements
The project's only requirement is aiohttp, which is available on PyPi.

[aiohttp](https://aiohttp.readthedocs.io/en/stable/index.html) >= 3.8.1

## Examples
```python

import asyncio # To use asynchronous programming
import pytenno
from pytenno.models.enums import Platform # To specify platforms for requests

async def main(): # PyTenno is asynchronous, so it must be done in an asynchronous context
    default_language = "en" # Set default response language to English
    default_platform = Platform.pc # Set default platform to PC

    email = "email" # Your warframe.market email
    password = "password" # Your password for your warframe.market account

    # Create a context manager for PyTenno
    async with pytenno.PyTenno(
        default_language=default_language, 
        default_platform=default_platform
    ) as tenno:
        ########################################
        # Logging to a warframe.market account #
        ########################################

        # This function returns a `CurrentUser` object, which contains misc. information about the user account.
        # This can be accessed through the `auth` attribute on the client.
        # All methods are sorted into several attributes on the client:
        # - `auction_entries`: Interface for getting auctions and bids by ID
        # - `auctions`: Interface for creating and searching for auctions
        # - `auth`: Interface for logging into warframe.market, and other authentication-related functions
        # - `items`: Interface for getting items, orders for them, and information about their droptables
        # - `liches`: Interface for getting lich-related information, such as weapons, ephemeras, etc.
        # - `misc`: Interface for miscellaneous endpoints for the API
        # - `profile`: Interface for creating orders for items
        # - `rivens`: Interface for getting Riven-related information such as weapons, attributes, etc.
        current_user = await tenno.auth.login(
            email=email, 
            password=password
        )
        print(current_user.ingame) # Prints the ingame name of the user that logged in

        ######################################
        # Finding orders for a specific item #
        ######################################

        # This function returns a `OrderRow` object, which contains information about the order.
        orders = await tenno.items.get_orders(
            # The full name of the item
            item_name="Mirage Prime Neuroptics", 
            # Whether to include data about the items requested, as well as the orders. If this were set to 
            # True, the method would return a tuple of (list[OrderRow], list[ItemFull]).
            # However in this case, it will just return a list[OrderRow].
            include_items=False,
            # The platform the orders must be on. If not set, it will use the default set
            # whent the client was created.
            platform=Platform.pc, 
        )
        for order in orders:
           
            user = order.user # The user who placed the order
            order_type = order.order_type # The type of the order (buy or sell)
            platinum = order.platinum # The amount of platinum in the order

            print(f"User: {user.ingame_name}\nOrder Type: {order_type}\nPlatinum: {platinum}\n")
    
if __name__ == "__main__":
    asyncio.run(main())
```
